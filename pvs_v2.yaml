openapi: 3.0.0
info:
  title: healthGorilla APIs
  version: '2.0'
  description: "# Table Of Contents \n- [Overview](#overview)\n- [APIs](#apis)\n- [Common Authorization](#authorization)\n- [Common Input](#common-input)\n  - [Patient Demographics](#patient-demographics)\n  - [Async response inputs](#async-response-inputs)\n- [Common Output](#common-output)\n  - [Data Success Result](#data-success-result)\n- [Common Error Codes and Messages](#common-error-codes-and-messages)\n- [Auditing](#auditing)\n- [API Specific Output Details](#api-specific-output-details)\n- [Environment Details](#environment-details)\n\n\n# Overview\n[Go to top](#table-of-contents)\n\nPluto integrated with Health Gorilla's FHIR-based APIs to provides seamless connectivity to a large network of electronic medical record systems, allowing patients to access their medical records.\n\n# APIs\n[Go to top](#table-of-contents)\n\nBelow are the set of API's integrated with Health Gorilla APIs to allow the patient to access their records from the health gorilla's exchange networks like ( #commonwell, #carequality):\n\n| Operation | Description  | \n| --------- | ------------ |\n| exists      | <b>A synchronous api</b>, Use this operation to check if a Patient exists within CommonWell or CareQuality.|\n| view\t      | Use this operation to get  the patient data (either view model or bundle) present in Health Gorilla FHIR store.|  \n| request-hg | API endpoint used to retrieve all the documents from health gorilla, this request execute the operation asynchronously and the operation result would be retrieved using the receive api enpoint later.|\n| receive      | API endpoint used to retrieve response for the given resultId and key|\n| update-hg      | API endpoint used to update a resource|  \n\n## Authorization\n[Go to top](#table-of-contents)\n\nThe JWT Bearer token issued by Pluto Clinical Tiral Service <b>cts/V2/accesstoken/new</b> gets added to the header of the API request with the word Bearer followed by the token string. The token contains plutoPatienId,  deviceId etc,. Authorization takes two process, first step to verify the bearer token and then the patient demog request verified against the CTS service.\n\n\n## Common Inputs\n[Go to top](#table-of-contents)\n\nBelow operation requires following information that caller need to send:\n\n| Operation | Patient Demographics | Async response inputs|\n| --------- | -------------------- | ----------------|\n| exists, request-hg, view, update-hg     | Required           | |\n|result ||Required\n\n### Patient Demographics\n\n[Go to top](#table-of-contents)\n\n| Input      | Description | \n| ---------- | ----------- |\n| firstName       | (<b style=\"color:red\">required</b>) Patient's first ncolor:redame.|\n| lastName      | (<b style=\"color:red\">required</b>) Patient's last name.|\n| birthDate     | (<b style=\"color:red\">required</b>) Patient's date of birth. The date format is YYYY-MM-DD||\n| gender     | (<b style=\"color:red\">required</b>) Patient's gender. The value is taken from set of following controlled string [ male OR female OR other OR unknown]|\n| postalCode     | (<b style=\"color:red\">required</b>) Patient's address postal code.|\n\n### Async response inputs\n[Go to top](#table-of-contents)\n\n| Input      | Description | \n| ---------- | ----------- |\n| resultId   |(required) used as an input to the receive result |\n| key      |(required) used as an input to the receive result| \n| chunk     |chunk information if too big to return response |\n\n## Common Output\n[Go to top](#table-of-contents)\n\n```JSON\n{\n      \"appVersion\": \"(required) version of app that returned this result goes here\",\n      \"apiVersion\n     \"appVersion\": \"(required) version of app that returned this result goes here\",\n      \"apiVersion\": \"(required) version of api that returned this result goes here\",\n      \"service\": \"(required) name of service that returned this result goes here\",\n      \"status\": \"(required) status of result goes here\",\n      \"callId\": \"(required) call id unique to the request served goes here\",\n      \"callTime\": \"(required) call time in yyyy-dd-mmTHH:mm:ss.fffZ format goes here\",\n      \"content\": {\n          \"status\": \"ready\",\n          \"data\": \"(optional) contains stringified JSON result data for the operation\"\n      }\n  }\n  \n```\n\n### Data Success Result\n[Go to top](#table-of-contents)\n\n| Input      | Description | \n| ---------- | ----------- |\n| status     | this field is <b>ready</b> if the operation is successful otherwise <b>failed</b>.\n| data       | Contains the stringified JSON result of the patient data, created from the bundle of information available in Health Gorilla. |\n                            \n\n### Common Error Codes and Messages\n[Go to top](#table-of-contents\n\n| Http code | Error code | Error message|\n|-----------|------------|--------------|\n| 500\t |  -1      | Unhandled error |\n| 404\t |  1      | Data not found |\n| 400\t |  2     | Invalid parameters |\n| 400\t |   5     | Account not found |\n| 400\t |   6     | EHR not found |\n| 400\t |   7   | Validation error |\n| 403\t | 10      | Invalid Pluto auth token |\n| 400\t |  11      | Invalid EHR credentials |\n| 400\t |   12     | Invalid EHR auth token |\n| 400\t |   13     | User name is required |\n| 500\t |  14     | EHR Connection error |\n| 500\t |  21     | Scraper is unavailable |\n| 500\t |   23     | Fhir api is unavailable |\n| 500\t |   24     | Secrets Manager is unavailable |\n| 500\t |  25     | SQS is unavailable |\n| 500\t |  26     | S3 is unavailable |\n| 500\t |   27     | Algolia is unavailable |\n| 500\t |   27     | Algolia is unavailable |\n| 403\t |  28     | Missing 'Authorization' header |\n| 403\t |   29     | Invalid authorization token |\n| 500\t |   31   | HealthGorilla is unavailable |\n| 500\t |  32   | URL is unavailable |\n| 500\t |   33   | Failed to search documents |\n| 500\t |  34   | Failed to search documents |\n| 500\t |   35   | Failed to retrieve resources |\n| 500\t |   36   | FhirMeta is unavailable |\n| 500\t |  37   | Failed to retrieve access token |\n| 500\t |  38   | Failed to search patient |\n| 500\t |  39   | Failed to create patient |\n| 500\t |   40   | Failed to lookup CommonWell patient |\n| 500\t |  41   | Failed to enroll CommonWell patient |\n| 500\t |   42   | Patient not enrolled |\n| 500\t |   43   | Failed to update patient |\n| 500\t | 44   | Failed to update resource |\n| 500\t |   45  | Invalid extension resource |\n| 500\t |  46  | Failed to create resource |\n| 500\t |  47  | Failed to execute operation |\n| 500\t |   48  | Failed to search resource |\n| 500\t |   49  | CTS is unavailable |\n| 403\t |  50  | Patient introspection failed |\n| 403\t |  51  | Failed to un-enroll CommonWell patient |\n\n\n\n\n\n\n                  \n\n### Auditing\n\n[Go to top](#table-of-contents)\n\n\nAudit logs capture events which can show “who” did “what” activit and when and why and what response the user received. An administrator or developer will want to examine all types of log files to get a complete picture of normal and abnormal events on their network. A log file event will indicate what action was attempted and if it was successful. \n\nThe following audit event log captured for the lamda's mentioned in the table.\n\n```JSON\n\n{\n\n       \"msg\": \"audit\",\n       \"who\": \"Patient Id\",\n       \"when\": \"Time when the request was made in UTC\",\n       \"why\": \"The component requested \",\n       \"what\": \"Successful Response\",\n       \"callId\": \"c3a8fdd0nahg03grhwe0\",\n       \"appVersion\": \"0.2.12\",\n       \"apiVersion\": \"v1\",\n       \"study_id\": \"c0gbo9rdph9s72vua1e0\",\n       \"patient_id\": \"c0gbo9rdph9s72vua13g\",\n       \"time\": \"2021-06-24T13:25:09.607Z\",\n       \"level\": \"info\"\n        }\n\n```\n\n### API Specific Output Details\n\n[Go to top](#table-of-contents)\n\n### Exists : Stringified Data Success Result\n\nThe strigified data has following JSON elements once the user parse the data. \n[Go to top](#table-of-contents)\n\n| Field      | Description | \n| ---------- | ----------- |\n| status      | this field is <b>true</b> if the patient search found matches otherwise <b>false</b>.\n| hgPatient     | contains patient's resource and hasCachedData, cachedDateTimeUtc\n|matches | this field has the key-value pairs of network \nexchanges. Key<b> cw</b> is present when matched persons are found in CommonWell and key <b>cq</b> is present when matched patients are found in CareQuality.|\n\n"
  summary: Health Gorilla API's  makes it easy for providers to pull their patient's information from any clinical records system using Patient360 FHIR-based API platform.
  contact:
    url: 'https://www.pluto.health'
    name: Pluto Support
    email: support@pluto.health
servers:
  - url: 'https://dev-pvs.pluto-service.com'
    description: ''
  - url: 'http://localhost:3000'
    description: ''
  - url: 'https://staging-pvs.pluto-service.com'
    description: ''
  - url: 'https://api-pvs.pluto-service.com'
    description: ''
paths:
  /v2/account/request-hg:
    post:
      summary: ''
      operationId: post-v2-account-request-hg
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncResult'
              examples:
                example-1:
                  value:
                    appVersion: 0.2.12
                    apiVersion: v1
                    service: PVS Pluto Service
                    status: Ok
                    callId: c3cszf5p2x5g038spj5g
                    callTime: '2021-06-28T10:09:00.078Z'
                    content:
                      resultId: c3cszf5p2x5g038spj60
                      key: Nhe5WlEGUcs7UoXDxDWgwQ2P5qDSecqjIj6IQErGZyW/De/uQoysJkxu+93J8NbD
          headers: {}
        '400':
          description: |-
            Sample Validation Error.
            -------------------------
            ```JSON
            {
                "appVersion": "0.2.13",
                "apiVersion": "v2",
                "service": "Pluto Interoperability Service",
                "status": "Error",
                "callId": "c3j40fhsagrg0385krcg",
                "callTime": "2021-07-06T11:36:30.250Z",
                "content": {
                    "error": {
                        "message": "Validation error",
                        "code": 7,
                        "data": {
                            "details": [
                                {
                                    "message": "\"patientBio.firstName\" is not allowed to be empty",
                                    "path": [
                                        "patientBio",
                                        "firstName"
                                    ],
                                    "type": "string.empty",
                                    "context": {
                                        "label": "patientBio.firstName",
                                        "value": "",
                                        "key": "firstName"
                                    }
                                }
                            ]
                        }
                    }
                }
            }
            ```
        '403':
          description: |-
            ```JSON
            {
                "appVersion": "0.2.13",
                "apiVersion": "v2",
                "service": "Pluto Interoperability Service",
                "status": "Error",
                "callId": "c3j3w9hsagrg0385kr90",
                "callTime": "2021-07-06T11:27:34.621Z",
                "content": {
                    "error": {
                        "message": "Missing 'Authorization' header",
                        "code": 28,
                        "data": {
                            "header": "Authorization"
                        }
                    }
                }
            }
            ```

            ```JSON
            {
                "appVersion": "0.2.13",
                "apiVersion": "v2",
                "service": "Pluto Interoperability Service",
                "status": "Error",
                "callId": "c3j3xe5sagrg0385kr9g",
                "callTime": "2021-07-06T11:30:00.878Z",
                "content": {
                    "error": {
                        "message": "Invalid authorization token",
                        "code": 30,
                        "data": {}
                    }
                }
            }
            ```
        '500':
          description: Internal Server Error
      description: |-
        API endpoint used to retrieve all the documents from health gorilla, this request complete the operation in the background and return a generic response that includes a `resultId` and `key` that can be used to retrieve the results later using `/pvs/v2/result/receive` endpoint.  

        Patient Enroll Process
        ----------------------

        When the hg-Patient is found in the $cw-lookup search, then the hg patient enrolled in the CW. If the patient is not enrolled then the hg-patient would be found in $cw-search. 

        If the hg-patient found in the $cw-search then the patient is locally found in HG and can be enrolled as existing person in CW. 

        If the hg-patient not found in $cw-search then the hg-patient can be enrolled as new person in CW.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'This APIs require a JWT Bearer token issued by Pluto Clinical Trial Service cts/v2/accesstoken/new api. JWT Bearer token will have the informations like "patientId", "deviceId" etc,.'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  patientBio:
                    firstName: string
                    lastName: string
                    gender: string
                    birthDate: string
                    postalCode: string
              properties:
                patientBio:
                  $ref: '#/components/schemas/PatientBio'
                responseType:
                  $ref: '#/components/schemas/ResponseType'
              required:
                - patientBio
            examples:
              PatientBio Sample:
                value:
                  patientBio:
                    firstName: string
                    lastName: string
                    gender: string
                    birthDate: string
                    postalCode: string
              Dummy PatientBio:
                value:
                  patientBio:
                    firstName: Dummy
                    lastName: Dummy
                    gender: male
                    birthDate: '1970-02-12'
                    postalCode: '60616'
              Multiple PostalCode:
                value:
                  patientBio:
                    firstName: string
                    lastName: string
                    gender: string
                    birthDate: string
                    postalCode: '27517,94115,9029'
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
          text/html:
            schema:
              type: object
            examples:
              example-1:
                value: {}
              example-2:
                value: {}
          text/plain:
            schema:
              type: object
              properties: {}
        description: |-
          The patient demographics value would contain the following fields. Please refer PatientBio Sample.

          This endpoint supports Dummy patient demographic. The Patient demographic's  FirstName or LastName should contain the value <b>Dummy</b> to get the dummy bundle. Please refer Dummy PatientBio request sample. 

          This endpoint supports Multiple PostalCodes separated by comma. Please refer Multiple PostalCode sample.
      tags:
        - HG
  /v2/result/receive:
    post:
      summary: ''
      operationId: post-v2-result-receive
      responses:
        '200':
          description: |-
            Invalid authorization token 
            Code - 30

            Missing 'Authorization' header
            Code - 28
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiveResponse'
              examples:
                example-1:
                  value:
                    appVersion: string
                    apiVersion: string
                    service: string
                    status: string
                    callId: string
                    callTime: string
                    content:
                      status: true
                      data: string
        '400':
          description: |-
            Bad Request

            Code - 7 
            Validation Errors
        '403':
          description: |-
            ```JSON
            {
                "appVersion": "0.2.13",
                "apiVersion": "v2",
                "service": "Pluto Interoperability Service",
                "status": "Error",
                "callId": "c3j3w9hsagrg0385kr90",
                "callTime": "2021-07-06T11:27:34.621Z",
                "content": {
                    "error": {
                        "message": "Missing 'Authorization' header",
                        "code": 28,
                        "data": {
                            "header": "Authorization"
                        }
                    }
                }
            }
            ```

            ```JSON
            {
                "appVersion": "0.2.13",
                "apiVersion": "v2",
                "service": "Pluto Interoperability Service",
                "status": "Error",
                "callId": "c3j3xe5sagrg0385kr9g",
                "callTime": "2021-07-06T11:30:00.878Z",
                "content": {
                    "error": {
                        "message": "Invalid authorization token",
                        "code": 30,
                        "data": {}
                    }
                }
            }
            ```
        '500':
          description: Internal Server Error
      description: API endpoint used to retrieve response for the given resultId and key.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'This APIs require a JWT Bearer token issued by Pluto Clinical Trial Service cts/v2/accesstoken/new api. JWT Bearer token will have the informations like "patientId", "deviceId" etc,.'
          required: true
      requestBody:
        content:
          application/json:
            examples:
              example:
                value:
                  resultId: string
                  key: string
                  chunkId: string
          application/xml:
            schema:
              description: ''
              type: object
              properties:
                resultId:
                  type: string
                  minLength: 1
                key:
                  type: string
                  minLength: 1
                chunkId:
                  type: number
              required:
                - resultId
                - key
                - chunkId
              x-examples:
                example-1:
                  resultId: '{{resultId}}'
                  key: '{{key}}'
                  chunkId: 0
            examples:
              example-1:
                value:
                  resultId: resultID
                  key: key
                  chunkId: 0
        description: |
          The receive operation requires following information that caller need to send:
      tags:
        - HG
    parameters: []
components:
  schemas:
    AsyncResult:
      description: ''
      type: object
      properties:
        appVersion:
          type: string
          minLength: 1
        apiVersion:
          type: string
          minLength: 1
        service:
          type: string
          minLength: 1
        status:
          type: string
          minLength: 1
        callId:
          type: string
          minLength: 1
        callTime:
          type: string
          minLength: 1
        content:
          type: object
          properties:
            resultId:
              type: string
              minLength: 1
            key:
              type: string
              minLength: 1
          required:
            - resultId
            - key
      required:
        - appVersion
        - apiVersion
        - service
        - status
        - callId
        - callTime
    Gender:
      oneOf:
        - properties: {}
          enum:
            - male
            - female
            - unknown
            - other
      type: string
      examples:
        - male
    PatientBio:
      description: ''
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        gender:
          type: string
          minLength: 1
        birthDate:
          type: string
          minLength: 1
        postalCode:
          type: string
          minLength: 1
      required:
        - firstName
        - lastName
        - gender
        - birthDate
        - postalCode
      x-examples:
        example-1:
          firstName: string
          lastName: string
          gender: string
          birthDate: string
          postalCode: string
      examples:
        - firstName: string
          lastName: string
          gender: string
          birthDate: string
          postalCode: string
    ReceiveResponse:
      description: ''
      type: object
      properties:
        appVersion:
          type: string
          minLength: 1
        apiVersion:
          type: string
          minLength: 1
        service:
          type: string
          minLength: 1
        status:
          type: string
          minLength: 1
        callId:
          type: string
          minLength: 1
        callTime:
          type: string
          minLength: 1
        content:
          type: object
          properties:
            status:
              type: boolean
            data:
              type: string
              minLength: 1
          required:
            - status
            - data
      required:
        - appVersion
        - apiVersion
        - service
        - status
        - callId
        - callTime
        - content
      x-examples:
        example-1:
          appVersion: string
          apiVersion: string
          service: string
          status: string
          callId: string
          callTime: string
          content:
            status: true
            data: string
    ResponseType:
      title: responseType
      oneOf:
        - enum:
            - view-model
            - bundle
      examples: []
      type: string
tags:
  - name: HG
