openapi: 3.0.0
info:
  title: PVS APIs
  version: '2.0'
  description: ''
  summary: PVS API's  makes it easy for providers to pull their patient's information from any clinical records systems.
  contact:
    url: 'https://www.pluto.health'
    name: Pluto Support
    email: support@pluto.health
servers: []
paths:
  /v2/account/request-hg:
    post:
      summary: ''
      operationId: post-v2-account-request-hg
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncResult'
              examples:
                example-1:
                  value:
                    appVersion: 0.2.12
                    apiVersion: v1
                    service: PVS Pluto Service
                    status: Ok
                    callId: c3cszf5p2x5g038spj5g
                    callTime: '2021-06-28T10:09:00.078Z'
                    content:
                      resultId: c3cszf5p2x5g038spj60
                      key: Nhe5WlEGUcs7UoXDxDWgwQ2P5qDSecqjIj6IQErGZyW/De/uQoysJkxu+93J8NbD
          headers: {}
        '400':
          description: |-
            Sample Validation Error.
            -------------------------
            ```JSON
            {
                "appVersion": "0.2.13",
                "apiVersion": "v2",
                "service": "Pluto Interoperability Service",
                "status": "Error",
                "callId": "c3j40fhsagrg0385krcg",
                "callTime": "2021-07-06T11:36:30.250Z",
                "content": {
                    "error": {
                        "message": "Validation error",
                        "code": 7,
                        "data": {
                            "details": [
                                {
                                    "message": "\"patientBio.firstName\" is not allowed to be empty",
                                    "path": [
                                        "patientBio",
                                        "firstName"
                                    ],
                                    "type": "string.empty",
                                    "context": {
                                        "label": "patientBio.firstName",
                                        "value": "",
                                        "key": "firstName"
                                    }
                                }
                            ]
                        }
                    }
                }
            }
            ```
        '403':
          description: |-
            ```JSON
            {
                "appVersion": "0.2.13",
                "apiVersion": "v2",
                "service": "Pluto Interoperability Service",
                "status": "Error",
                "callId": "c3j3w9hsagrg0385kr90",
                "callTime": "2021-07-06T11:27:34.621Z",
                "content": {
                    "error": {
                        "message": "Missing 'Authorization' header",
                        "code": 28,
                        "data": {
                            "header": "Authorization"
                        }
                    }
                }
            }
            ```

            ```JSON
            {
                "appVersion": "0.2.13",
                "apiVersion": "v2",
                "service": "Pluto Interoperability Service",
                "status": "Error",
                "callId": "c3j3xe5sagrg0385kr9g",
                "callTime": "2021-07-06T11:30:00.878Z",
                "content": {
                    "error": {
                        "message": "Invalid authorization token",
                        "code": 30,
                        "data": {}
                    }
                }
            }
            ```
        '500':
          description: Internal Server Error
      description: |-
        API endpoint used to retrieve all the documents from source, this request complete the operation in the background and return a generic response that includes a `resultId` and `key` that can be used to retrieve the results later using `/pvs/v2/result/receive` endpoint.  

        Patient Enroll Process
        ----------------------

        When the Patient is found in the $lookup search, then the patient enrolled in the source. If the patient is not enrolled then the atient would be found in $search. 

        If the patient found in the $search then the patient is locally found in the source and can be enrolled as existing person in the network. 

        If the patient not found in $search then the patient can be enrolled as new person in the network.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'This APIs require a JWT Bearer token issued by Pluto Clinical Trial Service cts/v2/accesstoken/new api. JWT Bearer token will have the informations like "patientId", "deviceId" etc,.'
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  patientBio:
                    firstName: string
                    lastName: string
                    gender: string
                    birthDate: string
                    postalCode: string
              properties:
                patientBio:
                  $ref: '#/components/schemas/PatientBio'
                responseType:
                  $ref: '#/components/schemas/ResponseType'
              required:
                - patientBio
            examples:
              PatientBio Sample:
                value:
                  patientBio:
                    firstName: string
                    lastName: string
                    gender: string
                    birthDate: string
                    postalCode: string
              Dummy PatientBio:
                value:
                  patientBio:
                    firstName: Dummy
                    lastName: Dummy
                    gender: male
                    birthDate: '1970-02-12'
                    postalCode: '60616'
              Multiple PostalCode:
                value:
                  patientBio:
                    firstName: string
                    lastName: string
                    gender: string
                    birthDate: string
                    postalCode: '27517,94115,9029'
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
          text/html:
            schema:
              type: object
            examples:
              example-1:
                value: {}
              example-2:
                value: {}
          text/plain:
            schema:
              type: object
              properties: {}
        description: |-
          The patient demographics value would contain the following fields. Please refer PatientBio Sample.

          This endpoint supports Dummy patient demographic. The Patient demographic's  FirstName or LastName should contain the value <b>Dummy</b> to get the dummy bundle. Please refer Dummy PatientBio request sample. 

          This endpoint supports Multiple PostalCodes separated by comma. Please refer Multiple PostalCode sample.
      tags:
        - PVS
  /v2/result/receive:
    post:
      summary: ''
      operationId: post-v2-result-receive
      responses:
        '200':
          description: |-
            Invalid authorization token 
            Code - 30

            Missing 'Authorization' header
            Code - 28
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiveResponse'
              examples:
                example-1:
                  value:
                    appVersion: string
                    apiVersion: string
                    service: string
                    status: string
                    callId: string
                    callTime: string
                    content:
                      status: string
                      data: string
        '400':
          description: |-
            Bad Request

            Code - 7 
            Validation Errors
        '403':
          description: |-
            ```JSON
            {
                "appVersion": "0.2.13",
                "apiVersion": "v2",
                "service": "Pluto Interoperability Service",
                "status": "Error",
                "callId": "c3j3w9hsagrg0385kr90",
                "callTime": "2021-07-06T11:27:34.621Z",
                "content": {
                    "error": {
                        "message": "Missing 'Authorization' header",
                        "code": 28,
                        "data": {
                            "header": "Authorization"
                        }
                    }
                }
            }
            ```

            ```JSON
            {
                "appVersion": "0.2.13",
                "apiVersion": "v2",
                "service": "Pluto Interoperability Service",
                "status": "Error",
                "callId": "c3j3xe5sagrg0385kr9g",
                "callTime": "2021-07-06T11:30:00.878Z",
                "content": {
                    "error": {
                        "message": "Invalid authorization token",
                        "code": 30,
                        "data": {}
                    }
                }
            }
            ```
        '500':
          description: Internal Server Error
      description: API endpoint used to retrieve response for the given resultId and key.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'This APIs require a JWT Bearer token issued by Pluto Clinical Trial Service cts/v2/accesstoken/new api. JWT Bearer token will have the informations like "patientId", "deviceId" etc,.'
          required: true
      requestBody:
        content:
          application/json:
            examples:
              example:
                value:
                  resultId: string
                  key: string
                  chunkId: string
          application/xml:
            schema:
              description: ''
              type: object
              properties:
                resultId:
                  type: string
                  minLength: 1
                key:
                  type: string
                  minLength: 1
                chunkId:
                  type: number
              required:
                - resultId
                - key
                - chunkId
              x-examples:
                example-1:
                  resultId: '{{resultId}}'
                  key: '{{key}}'
                  chunkId: 0
            examples:
              example-1:
                value: |-
                  {
                      "resultId": "resultID",
                      "key": "key",
                      "chunkId": 0
                  }
        description: |
          The receive operation requires following information that caller need to send:
      tags:
        - PVS
    parameters: []
components:
  schemas:
    AsyncResult:
      description: ''
      type: object
      properties:
        appVersion:
          type: string
          minLength: 1
        apiVersion:
          type: string
          minLength: 1
        service:
          type: string
          minLength: 1
        status:
          type: string
          minLength: 1
        callId:
          type: string
          minLength: 1
        callTime:
          type: string
          minLength: 1
        content:
          type: object
          properties:
            resultId:
              type: string
              minLength: 1
            key:
              type: string
              minLength: 1
          required:
            - resultId
            - key
      required:
        - appVersion
        - apiVersion
        - service
        - status
        - callId
        - callTime
    Gender:
      oneOf:
        - properties: {}
          enum:
            - male
            - female
            - unknown
            - other
      type: string
    PatientBio:
      description: The patient demographics value would contain the following fields.
      type: object
      x-examples:
        example-1:
          patientBio:
            firstName: string
            lastName: string
            gender: string
            birthDate: string
            postalCode: string
      examples:
        - patientBio:
            firstName: string
            lastName: string
            gender: male
            birthDate: string
            postalCode: string
        - patientBio:
            firstName: string
            lastName: string
            gender: male
            birthDate: string
            postalCode: string
      properties:
        patientBio:
          type: object
          required:
            - firstName
            - lastName
            - gender
            - birthDate
            - postalCode
          properties:
            firstName:
              type: string
              minLength: 1
            lastName:
              type: string
              minLength: 1
            gender:
              $ref: '#/components/schemas/Gender'
            birthDate:
              type: string
              minLength: 1
              description: The date format is YYYY-MM-DD
            postalCode:
              type: string
              minLength: 1
      required:
        - patientBio
    ReceiveResponse:
      description: ''
      type: object
      properties:
        appVersion:
          type: string
          minLength: 1
        apiVersion:
          type: string
          minLength: 1
        service:
          type: string
          minLength: 1
        status:
          type: string
          minLength: 1
        callId:
          type: string
          minLength: 1
        callTime:
          type: string
          minLength: 1
        content:
          type: object
          properties:
            status:
              type: boolean
            data:
              type: string
              minLength: 1
          required:
            - status
            - data
      required:
        - appVersion
        - apiVersion
        - service
        - status
        - callId
        - callTime
        - content
      x-examples:
        example-1:
          appVersion: string
          apiVersion: string
          service: string
          status: string
          callId: string
          callTime: string
          content:
            status: true
            data: string
    ResponseType:
      title: responseType
      oneOf:
        - enum:
            - view-model
            - bundle
      examples: []
      type: string
tags:
  - name: PVS
